#  Copyright (C) 2019-2023 Synopsys, Inc.
#  Copyright (C) 2024 Tenstorrent AI ULC
#  SPDX-License-Identifier: Apache-2.0

adapter driver jlink
adapter speed 10000
transport select jtag

source [find cpu/arc/hs.tcl]

reset_config srst_only

set _coreid 0
set _dbgbase [expr {$_coreid << 13}]

set _CHIPNAME arc-em

proc setup_csm {} {
	# Enable ECC
	arc jtag set-aux-reg 0x9a1 0x0
	set _csm_ecc_ini [expr [arc jtag get-aux-reg 0x9a3]]
	set _csm_ecc_ini [expr {$_csm_ecc_ini | 0x3}]
	arc jtag set-aux-reg 0x9a3 $_csm_ecc_ini
	# Wait for ARC to set busy bit (indicates start of CSM init)
	while {($_csm_ecc_ini & (0x1 << 30)) == 0} {
		# Run the core so ECC init can occur
		set _csm_ecc_ini [expr [arc jtag get-aux-reg 0x9a3]]
	}
	# Wait for busy bit to clear
	while {($_csm_ecc_ini & (0x1 << 30))} {
		set _csm_ecc_ini [expr [arc jtag get-aux-reg 0x9a3]]
	}
	echo "Initialized CSM"
}

# Override the init_reset procedure
proc init_reset {mode} {
	echo "Resetting blackhole SOC"
	adapter assert srst
	sleep 10
	adapter deassert srst
	# Without this delay, the jtag scan fails
	sleep 100
	jtag arp_init
	# Reinit CSM
	setup_csm
	# Core 0 will be running after reset, which is out of sync
	# with OpenOCD's internal state. Halt the core manually by setting
	# the FH bit in the DEBUG aux reg
	set _debug [expr [arc jtag get-aux-reg 0x05]]
	arc jtag set-aux-reg 0x05 [expr {$_debug | 0x2}]
	# Call OpenOCD's halt function as well, to be sure the state is
	# right now
	halt
}

# Custom hook to reset blackhole
proc bh_reset {core_index target_name} {
	arc_hs_reset $target_name
	# Disable data cache
	arc jtag set-aux-reg 0x48 0x1
	# Halt ARC, and disable alignment checking
	arc jtag set-aux-reg 0x0a 0x80001
}

# Custom hook to reprogram blackhole PC
proc bh_reset_end {} {
	# After reset, the program counter will be in the wrong location
	# 0x40000080. Set it to 0x84 to start normal execution
	set_reg {pc 0x84}
}

proc setup_cpu {core_index expected_id} {
	global _coreid
	global _dbgbase
	global _CHIPNAME

	set _TARGETNAME $_CHIPNAME.cpu$core_index
	set _coreid [expr {$core_index - 1}]
	set _dbgbase [expr {$_coreid << 13}]
	jtag newtap $_CHIPNAME cpu$core_index -irlen 4 -ircapture 0x1 -expected-id $expected_id

	target create $_TARGETNAME arcv2 -chain-position $_TARGETNAME
	$_TARGETNAME configure -coreid $_coreid
	$_TARGETNAME configure -dbgbase $_dbgbase
	$_TARGETNAME configure -event reset-assert "bh_reset $_coreid $_TARGETNAME"
	$_TARGETNAME configure -event reset-end "bh_reset_end"

	arc_hs_init_regs

	# Enable L2 cache support
	$_TARGETNAME arc cache l2 auto 1
}

jtag newtap security.cpu1 unknown1 -irlen 4 -ircapture 0x1 -expected-id 0x201444b1

# OpenOCD discovers JTAG TAPs in reverse order.
setup_cpu 4 0x100c54b1
setup_cpu 3 0x100854b1
setup_cpu 2 0x100454b1
setup_cpu 1 0x100054b1

# Disable GDB port for CPU2-CPU4. Otherwise the GDB server will connect to
# CPU4 by default, as it is the first target
arc-em.cpu2 configure -gdb-port disabled
arc-em.cpu3 configure -gdb-port disabled
arc-em.cpu4 configure -gdb-port disabled

# Use hard breakpoints- the ROM copies over the memory in CSM during boot,
# so soft breakpoints won't work
gdb_breakpoint_override hard
